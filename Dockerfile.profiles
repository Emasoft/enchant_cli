#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# syntax=docker/dockerfile:1.10
# Multi-stage Dockerfile for testing with different profiles

# Base stage with common dependencies
FROM python:3.12-slim AS base

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install uv
ADD https://astral.sh/uv/install.sh /uv-installer.sh
RUN sh /uv-installer.sh && rm /uv-installer.sh
ENV PATH="/root/.local/bin:$PATH"

# Verify uv installation
RUN uv --version

# Set up the app directory
WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Local testing stage
FROM base AS local-test

# Set environment for local testing
ENV TEST_PROFILE=local
ENV SKIP_REMOTE_TESTS=true
ENV PYTEST_TIMEOUT=60
ENV MAX_RETRIES=10

# Copy project files
COPY pyproject.toml uv.lock README.md ./
COPY src/ ./src/
COPY tests/ ./tests/
COPY .github/pytest.ini ./.github/

# Install dependencies with dev group
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --group dev

# Set Python path
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Default command for local tests
CMD ["uv", "run", "pytest", "tests", "-c", ".github/pytest.ini", "-v", "--tb=short"]

# Remote/CI testing stage
FROM base AS remote-test

# Set environment for remote testing
ENV TEST_PROFILE=remote
ENV CI=true
ENV GITHUB_ACTIONS=true
ENV SKIP_LOCAL_MODE_TESTS=true
ENV PYTEST_TIMEOUT=30
ENV MAX_RETRIES=2

# Copy project files
COPY pyproject.toml uv.lock README.md ./
COPY src/ ./src/
COPY tests/ ./tests/
COPY .github/pytest.ini ./.github/

# Install dependencies with dev group
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --group dev

# Set Python path
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Default command for remote tests
CMD ["uv", "run", "pytest", "tests", "-c", ".github/pytest.ini", "-v", "--tb=line", "-q"]

# Full test stage with all features
FROM base AS full-test

# Install additional tools for integration tests
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set environment for full testing
ENV TEST_PROFILE=full
ENV PYTEST_TIMEOUT=300

# Copy project files
COPY pyproject.toml uv.lock README.md ./
COPY src/ ./src/
COPY tests/ ./tests/
COPY .github/pytest.ini ./.github/

# Install all dependencies including optional ones
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --all-extras --group dev

# Set Python path
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Default command for full tests with coverage
CMD ["uv", "run", "pytest", "tests", "-c", ".github/pytest.ini", \
     "--cov=src/enchant_book_manager", "--cov-report=term-missing", \
     "--cov-report=html", "--cov-report=xml:test-results/coverage.xml", \
     "--junit-xml=test-results/junit.xml", "-v"]
