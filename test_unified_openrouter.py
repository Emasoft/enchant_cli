#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test unified OpenRouter API for both renaming and translation
"""

import os
import sys
import tempfile
from pathlib import Path

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from renamenovels import process_novel_file
from translation_service import ChineseAITranslator
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_unified_api():
    """Test that both renaming and translation use OpenRouter API"""
    print("\n" + "="*70)
    print("TESTING UNIFIED OPENROUTER API")
    print("="*70)
    
    # Check for API key
    api_key = os.environ.get('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY not found in environment variables")
        print("   Please set: export OPENROUTER_API_KEY='your-key-here'")
        return False
    else:
        print(f"‚úÖ OPENROUTER_API_KEY found (length: {len(api_key)})")
    
    # Test Phase 1: Renaming with OpenRouter
    print("\n" + "="*60)
    print("PHASE 1: Testing Renaming with OpenRouter")
    print("="*60)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        test_file = Path(temp_dir) / "ÈÉΩÂ∏ÇÂºÇËÉΩÁéã.txt"
        test_content = """Á¨¨‰∏ÄÁ´† ËßâÈÜíÂºÇËÉΩ

Âº†‰ºüÊòØ‰∏Ä‰∏™ÊôÆÈÄöÁöÑ‰∏äÁè≠ÊóèÔºå‰ΩÜ‰∏ÄÂú∫ÊÑèÂ§ñËÆ©‰ªñËé∑Âæó‰∫ÜË∂ÖËÉΩÂäõ„ÄÇ

ÈÇ£ÊòØ‰∏Ä‰∏™Èõ∑Èõ®‰∫§Âä†ÁöÑÂ§úÊôöÔºåÂº†‰ºüË¢´Èó™ÁîµÂáª‰∏≠Âç¥Â•áËøπËà¨Âú∞Ê¥ª‰∫Ü‰∏ãÊù•„ÄÇ

Êõ¥Á•ûÂ•áÁöÑÊòØÔºå‰ªñÂèëÁé∞Ëá™Â∑±ËÉΩÊéßÂà∂ÁîµÊµÅ„ÄÇ

"ËøôÊòØÊÄé‰πàÂõû‰∫ãÔºü"Âº†‰ºüÁúãÁùÄËá™Â∑±ÂÜíÂá∫ÁîµÂÖâÁöÑÂèåÊâãÔºåÂøÉ‰∏≠ÂÖÖÊª°ÈúáÊÉä„ÄÇ
"""
        
        test_file.write_text(test_content, encoding='utf-8')
        print(f"‚úÖ Created test file: {test_file.name}")
        
        try:
            # Temporarily disable iCloud to avoid command validation issues
            import renamenovels
            original_icloud = renamenovels.ICLOUD
            renamenovels.ICLOUD = False
            
            print("\nüìù Calling OpenRouter API for renaming...")
            success, new_path, metadata = process_novel_file(
                test_file,
                api_key,
                model="gpt-4o-mini",  # Will be mapped to openai/gpt-4o-mini
                temperature=0.0
            )
            
            if success and new_path != test_file:
                print(f"‚úÖ Successfully renamed using OpenRouter:")
                print(f"   Original: {test_file.name}")
                print(f"   New name: {new_path.name}")
                if metadata:
                    print(f"   Title: {metadata.get('novel_title_english', 'N/A')}")
                    print(f"   Author: {metadata.get('author_name_english', 'N/A')}")
                phase1_success = True
            else:
                print("‚ùå Renaming failed")
                phase1_success = False
                
        except Exception as e:
            print(f"‚ùå Error during renaming: {e}")
            import traceback
            traceback.print_exc()
            phase1_success = False
        finally:
            # Restore original iCloud setting
            if 'original_icloud' in locals():
                renamenovels.ICLOUD = original_icloud
    
    # Test Phase 2: Translation with OpenRouter
    print("\n" + "="*60)
    print("PHASE 2: Testing Translation with OpenRouter")
    print("="*60)
    
    try:
        translator = ChineseAITranslator(
            logger=logger,
            use_remote=True,
            api_key=api_key,
            double_pass=False
        )
        
        print(f"üì° Using API: {translator.api_url}")
        print(f"ü§ñ Model: {translator.MODEL_NAME}")
        
        test_text = "ËøôÊòØ‰∏Ä‰∏™ÊµãËØï„ÄÇÊàë‰ª¨Ê≠£Âú®È™åËØÅÁªü‰∏ÄÁöÑAPIÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú„ÄÇ"
        print(f"\nüìù Testing translation: '{test_text}'")
        
        result = translator.translate(test_text, is_last_chunk=True)
        
        if result:
            print(f"‚úÖ Translation successful:")
            print(f"   Result: '{result}'")
            
            # Show cost tracking
            if translator.total_cost > 0:
                print(f"\nüí∞ Cost tracking working:")
                print(f"   Total cost: ${translator.total_cost:.6f}")
                print(f"   Total tokens: {translator.total_tokens}")
            
            phase2_success = True
        else:
            print("‚ùå Translation failed")
            phase2_success = False
            
    except Exception as e:
        print(f"‚ùå Error during translation: {e}")
        import traceback
        traceback.print_exc()
        phase2_success = False
    
    # Summary
    print("\n" + "="*70)
    print("UNIFIED OPENROUTER API TEST SUMMARY")
    print("="*70)
    print(f"Phase 1 (Renaming):    {'‚úÖ PASSED' if phase1_success else '‚ùå FAILED'}")
    print(f"Phase 2 (Translation): {'‚úÖ PASSED' if phase2_success else '‚ùå FAILED'}")
    print("\nBoth phases now use OpenRouter API with unified cost tracking!")
    print("="*70)
    
    return phase1_success and phase2_success

if __name__ == "__main__":
    success = test_unified_api()
    sys.exit(0 if success else 1)