name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  # Note: Comprehensive linting is also performed by Super-Linter in super-linter.yml
  # This job focuses on Python-specific linting with our project's exact configuration
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python environment
        run: |
          uv python install 3.12
          uv sync --all-extras

      - name: Run ruff
        run: |
          uv run ruff check \
            --ignore E203,E402,E501,E266,W505,F841,F842,F401,W293,I001,UP015,C901,W291,UP017,UP009,B007,B011,UP031 \
            src tests

      - name: Run ruff format check
        run: uv run ruff format --check src tests

      - name: Run mypy
        run: uv run mypy src --strict --ignore-missing-imports

      - name: Run yamllint
        run: uv run yamllint . --strict

      - name: Install actionlint
        run: |
          mkdir -p ~/.local/bin
          VERSION="1.7.7"
          ARCH="amd64"
          OS="linux"
          URL="https://github.com/rhysd/actionlint/releases/download/v${VERSION}/actionlint_${VERSION}_${OS}_${ARCH}.tar.gz"
          curl -L "${URL}" | tar xz -C ~/.local/bin actionlint
          chmod +x ~/.local/bin/actionlint
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Install yamlfmt
        run: |
          # Install Go if not available
          if ! command -v go &> /dev/null; then
            wget -q https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
          fi
          # Install yamlfmt
          go install github.com/google/yamlfmt/cmd/yamlfmt@latest
          echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      - name: Run actionlint
        run: actionlint

      - name: Check YAML formatting
        run: yamlfmt -lint .

  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run deptry
        run: uv run deptry .

      - name: Check for security vulnerabilities
        run: |
          uv pip install pip-audit
          uv run pip-audit

      - name: Generate dependency reports
        if: always()
        run: |
          # Generate deptry JSON report
          uv run deptry . --json-output .deptry.json || true

          # Generate pip-audit report
          uv run pip-audit --format json --output pip-audit.json || true

      - name: Upload dependency reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            .deptry.json
            pip-audit.json
          retention-days: 7

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python environment
        run: |
          uv python install ${{ matrix.python-version }}
          uv sync --all-extras

      - name: Run tests with coverage
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          SKIP_LOCAL_MODE_TESTS: true
          GIT_AUTHOR_NAME: Emasoft
          GIT_AUTHOR_EMAIL: 713559+Emasoft@users.noreply.github.com
          GIT_COMMITTER_NAME: Emasoft
          GIT_COMMITTER_EMAIL: 713559+Emasoft@users.noreply.github.com
        run: |
          # Use CI-specific pytest configuration
          uv run pytest tests -c .github/pytest.ini --cov=src/enchant_book_manager --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    needs: [lint, dependency-check, test]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python environment
        run: uv python install 3.12

      - name: Build package
        run: uv build

      - name: Check wheel contents
        run: |
          unzip -l dist/*.whl | head -50

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python environment
        run: uv python install 3.12

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        env:
          UV_PUBLISH_USERNAME: __token__
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |-
          uv publish
